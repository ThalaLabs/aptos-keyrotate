#!/usr/bin/env bash

set -euo pipefail

VERSION="0.1.0"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Default values
PROFILE=""
NEW_PRIVATE_KEY_FILE=""
SAVE_TO_PROFILE=""
BACKUP_DIR="./backups"
SKIP_BACKUP=false
ASSUME_YES=false
GENERATED_KEY_FILE=""

# Function to print colored messages
error() {
    echo -e "${RED}Error: $1${NC}" >&2
}

success() {
    echo -e "${GREEN}$1${NC}"
}

warning() {
    echo -e "${YELLOW}Warning: $1${NC}"
}

info() {
    echo "$1"
}

# Function to show help
show_help() {
    cat << EOF
aptos-keyrotate - Simplify Aptos account key rotation

Like rotating your keys, but simpler. Handles proven key rotation with automatic
backups and safety checks.

Usage: aptos-keyrotate [OPTIONS]

Options:
    --profile PROFILE              Existing Aptos CLI profile name (required)
    --new-private-key-file FILE    Path to new private key (auto-generated if omitted)
    --save-to-profile PROFILE      Save rotated config to new profile name
    --backup-dir DIR               Backup directory for old keys (default: ./backups)
    --skip-backup                  Skip creating backup of old private key
    --yes                          Skip confirmation prompts
    -h, --help                     Show this help message
    -v, --version                  Show version information

Examples:
    # Basic rotation (auto-generate new key)
    aptos-keyrotate --profile my-wallet

    # Rotate with specific new key
    aptos-keyrotate --profile my-wallet --new-private-key-file ./new-key

    # Save to new profile and custom backup location
    aptos-keyrotate --profile my-wallet --save-to-profile my-wallet-rotated --backup-dir ~/key-backups

    # Skip backup and confirmations
    aptos-keyrotate --profile my-wallet --skip-backup --yes

EOF
}

# Function to show version
show_version() {
    echo "aptos-keyrotate version $VERSION"
}

# Parse command line arguments
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --profile)
                PROFILE="$2"
                shift 2
                ;;
            --new-private-key-file)
                NEW_PRIVATE_KEY_FILE="$2"
                shift 2
                ;;
            --save-to-profile)
                SAVE_TO_PROFILE="$2"
                shift 2
                ;;
            --backup-dir)
                BACKUP_DIR="$2"
                shift 2
                ;;
            --skip-backup)
                SKIP_BACKUP=true
                shift
                ;;
            --yes)
                ASSUME_YES=true
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--version)
                show_version
                exit 0
                ;;
            *)
                error "Unknown option: $1"
                echo ""
                show_help
                exit 1
                ;;
        esac
    done

    # Validate required arguments
    if [[ -z "$PROFILE" ]]; then
        error "Missing required argument: --profile"
        echo ""
        show_help
        exit 1
    fi
}


# Validate profile exists
validate_profile() {
    local config_file="$HOME/.aptos/config.yaml"

    if [[ ! -f "$config_file" ]]; then
        error "Aptos config file not found at $config_file"
        info "Run 'aptos init' to create a profile first."
        exit 1
    fi

    if ! aptos config show-profiles --profile "$PROFILE" &> /dev/null; then
        error "Profile '$PROFILE' not found in $config_file"
        info "Available profiles:"
        aptos config show-profiles 2>/dev/null || true
        exit 1
    fi

    info "✓ Profile '$PROFILE' found"
}

# Get account address from profile
get_account_address() {
    local address
    address=$(aptos config show-profiles --profile "$PROFILE" 2>/dev/null | grep -A 5 "\"$PROFILE\"" | grep "account" | awk '{print $2}' | tr -d '",')

    if [[ -z "$address" ]]; then
        error "Could not extract account address from profile '$PROFILE'"
        exit 1
    fi

    echo "$address"
}

# Get REST URL from profile
get_rest_url() {
    local url
    url=$(aptos config show-profiles --profile "$PROFILE" 2>/dev/null | grep -A 5 "\"$PROFILE\"" | grep "rest_url" | awk '{print $2}' | tr -d '",')

    if [[ -z "$url" ]]; then
        error "Could not extract REST URL from profile '$PROFILE'"
        exit 1
    fi

    echo "$url"
}

# Query current authentication key
get_current_auth_key() {
    local address=$1
    local url=$2
    local auth_key

    auth_key=$(aptos move view \
        --args "address:$address" \
        --function-id 0x1::account::get_authentication_key \
        --url "$url" 2>/dev/null | grep -o '0x[a-fA-F0-9]*' | head -1)

    if [[ -z "$auth_key" ]]; then
        error "Could not query authentication key for account $address"
        info "Make sure the account exists on-chain at $url"
        exit 1
    fi

    echo "$auth_key"
}

# Display current account state
display_account_state() {
    local address=$1
    local auth_key=$2
    local url=$3

    info ""
    info "Current Account State:"
    info "======================"
    info "Address:          $address"
    info "Auth Key:         $auth_key"
    info "Network:          $url"
    info ""
}

# Confirm rotation
confirm_rotation() {
    if [[ "$ASSUME_YES" == true ]]; then
        return 0
    fi

    warning "⚠️  Key Rotation Warning ⚠️"
    info ""
    info "This will rotate your account's authentication key to a new private key."
    info "After rotation:"
    info "  • Your old private key will NO LONGER work for this account"
    info "  • Only the new private key can sign transactions"
    info "  • This operation CANNOT be easily undone"
    info ""

    if [[ "$SKIP_BACKUP" == false ]]; then
        info "Your old private key will be backed up to: $BACKUP_DIR"
    else
        warning "Backup is DISABLED. Your old key will NOT be saved!"
    fi

    info ""
    read -p "Do you want to continue? (yes/no): " -r
    echo

    if [[ ! $REPLY =~ ^[Yy]es$ ]]; then
        info "Key rotation cancelled."
        exit 0
    fi
}

# Backup current private key
backup_private_key() {
    if [[ "$SKIP_BACKUP" == true ]]; then
        info "Skipping backup (--skip-backup specified)"
        return 0
    fi

    local address=$1
    local timestamp
    timestamp=$(date +%Y-%m-%d-%H-%M-%S)
    local backup_file="$BACKUP_DIR/${address}-${timestamp}.key"

    # Create backup directory if it doesn't exist
    mkdir -p "$BACKUP_DIR"

    # Extract private key from profile
    local private_key
    private_key=$(aptos config show-private-key --profile "$PROFILE" 2>/dev/null | grep -o '0x[a-fA-F0-9]*')

    if [[ -z "$private_key" ]]; then
        error "Could not extract private key from profile '$PROFILE'"
        exit 1
    fi

    # Save to backup file
    echo "$private_key" > "$backup_file"
    chmod 600 "$backup_file"  # Set restrictive permissions

    success "✓ Old private key backed up to: $backup_file"
}

# Validate new private key file exists
validate_new_key_file() {
    if [[ -n "$NEW_PRIVATE_KEY_FILE" && ! -f "$NEW_PRIVATE_KEY_FILE" ]]; then
        error "New private key file not found: $NEW_PRIVATE_KEY_FILE"
        exit 1
    fi
}

# Generate new private key if not provided
generate_new_key() {
    if [[ -n "$NEW_PRIVATE_KEY_FILE" ]]; then
        # User provided a key file, don't generate
        return 0
    fi

    info "Auto-generating new private key..."

    # Create temporary key file
    GENERATED_KEY_FILE=$(mktemp /tmp/aptos-key.XXXXXX)

    if ! aptos key generate --output-file "$GENERATED_KEY_FILE" --assume-yes &> /dev/null; then
        error "Failed to generate new private key"
        rm -f "$GENERATED_KEY_FILE" "$GENERATED_KEY_FILE.pub"
        exit 1
    fi

    NEW_PRIVATE_KEY_FILE="$GENERATED_KEY_FILE"
    success "✓ New private key generated"
}

# Cleanup generated key files
cleanup_generated_keys() {
    if [[ -n "$GENERATED_KEY_FILE" ]]; then
        rm -f "$GENERATED_KEY_FILE" "$GENERATED_KEY_FILE.pub"
    fi
}

# Perform key rotation
rotate_key() {
    local cmd="aptos account rotate-key --profile $PROFILE"

    cmd="$cmd --new-private-key-file $NEW_PRIVATE_KEY_FILE"
    info "Rotating to private key: $NEW_PRIVATE_KEY_FILE"

    if [[ -n "$SAVE_TO_PROFILE" ]]; then
        cmd="$cmd --save-to-profile $SAVE_TO_PROFILE"
        info "Will save rotated profile as: $SAVE_TO_PROFILE"
    else
        cmd="$cmd --skip-saving-profile"
    fi

    cmd="$cmd --assume-yes"

    info ""
    info "Executing rotation..."

    if ! eval "$cmd"; then
        error "Key rotation failed!"
        cleanup_generated_keys
        exit 1
    fi

    success "✓ Key rotation transaction successful"
}

# Verify rotation succeeded
verify_rotation() {
    local address=$1
    local url=$2
    local old_auth_key=$3

    info ""
    info "Verifying rotation..."

    local new_auth_key
    new_auth_key=$(get_current_auth_key "$address" "$url")

    if [[ "$new_auth_key" == "$old_auth_key" ]]; then
        error "Rotation verification failed: authentication key unchanged"
        exit 1
    fi

    success "✓ Rotation verified"
    info ""
    info "New authentication key: $new_auth_key"
}

# Display success message
display_success() {
    local profile_name=${SAVE_TO_PROFILE:-$PROFILE}

    success ""
    success "=========================================="
    success "   Key Rotation Completed Successfully"
    success "=========================================="
    info ""
    info "Active profile: $profile_name"
    info ""
    info "You can now use the new profile:"
    info "  aptos account list --profile $profile_name"
    info ""

    if [[ "$SKIP_BACKUP" == false ]]; then
        info "Old private key backup location: $BACKUP_DIR"
    fi
}

# Main function
main() {
    parse_args "$@"

    info "Starting Aptos key rotation for profile: $PROFILE"
    info ""

    validate_profile

    local address
    address=$(get_account_address)
    info "✓ Account address: $address"

    local url
    url=$(get_rest_url)
    info "✓ Network URL: $url"

    local auth_key
    auth_key=$(get_current_auth_key "$address" "$url")
    info "✓ Current auth key retrieved"

    display_account_state "$address" "$auth_key" "$url"

    validate_new_key_file

    confirm_rotation

    backup_private_key "$address"

    generate_new_key

    rotate_key

    verify_rotation "$address" "$url" "$auth_key"

    cleanup_generated_keys

    display_success
}

# Run main function
main "$@"
